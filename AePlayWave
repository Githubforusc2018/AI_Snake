package AePlayWave;

import javax.sound.sampled.*;
import java.io.File;
import java.io.IOException;

/*  播放音乐，测试正常*/
public class AePlayWave extends Thread{
    private String fileName;    //音乐文件名
    private final int Buffer_Size =524288;  //128KB
    public AePlayWave(String wavFile){
        fileName = wavFile; //构造函数
    }
    public void run() {
        File soundFile = new File(fileName);
        AudioInputStream audioInputStream = null;   //构造从指示的目标数据行读取数据的音频输入流
        try {
            /*AudioSystem 类包括许多操作 AudioInputStream 对象的方法。例如，这些方法可以让您：
                从外部音频文件、流或 URL 获得音频输入流
                从音频输入流写入外部文件
                将音频输入流转换为不同的音频格式
            *
            * */
            audioInputStream = AudioSystem.getAudioInputStream(soundFile);  //得到音频输入流
        } catch (UnsupportedAudioFileException e1) {
            e1.printStackTrace();
            return;
        } catch (IOException e1) {
            e1.printStackTrace();
            return;
        }
        AudioFormat format = audioInputStream.getFormat();//类适应多种常见声音文件编码技术
        SourceDataLine auline = null;//源数据行是可以写入数据的数据行
        /*DataLine.Info 还提供特定于数据行的其他信息。这些信息包括：
            受数据行支持的音频格式其内部缓冲区的最小和最大大小
        * */
        DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);
        //根据指定信息构造数据行的信息对象，这些信息包括单个音频格式。

        try {
            auline = (SourceDataLine) AudioSystem.getLine(info);
            auline.open(format);    //打开具有指定格式的行，这样可使行获得所有所需的系统资源并变得可操作。
        } catch (LineUnavailableException e) {
            e.printStackTrace();
            return;
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }

        auline.start(); //文件流开始读入
        int nBytesRead = 0;
        byte[] abData = new byte[Buffer_Size];

        try {
            while (nBytesRead != -1) {
                nBytesRead = audioInputStream.read(abData, 0, abData.length);
                if (nBytesRead >= 0)
                    auline.write(abData, 0, nBytesRead);
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        } finally {
            auline.drain(); //释放ObjectOutputStream的任何缓冲的数据。类似冲洗，但不会传播刷新到基础流
            auline.close(); //关闭文件
        }
    }
}
